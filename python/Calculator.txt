import tkinter as tk
from tkinter import ttk

class Calculator(tk.Toplevel):
    def __init__(self, master=None):
        super().__init__(master)

        self.title("Calculator by PKKY")
        self.geometry("400x450")
        self.resizable(0, 0)

        self.current_input = ""
        self.memory = None
        self.operator = None
        self.is_dark_mode = False

        # Close the application when pressing "ESC"
        self.bind("<Escape>", self.close_app)

        self.create_ui()
        self.bind_keys()

    def bind_keys(self):
        for char in '0123456789+-*/.':
            self.bind(char, self.add_character_key(char))
        self.bind('<Return>', lambda event: self.add_to_input("="))
        self.bind('<BackSpace>', lambda event: self.backspace())

    def close_app(self, event=None):
        self.destroy()

    def backspace(self):
        self.current_input = self.current_input[:-1]
        self.update_display()

    def create_ui(self):
        self.text_widget = tk.Text(self, font=('Arial', 20), height=2, wrap=tk.NONE, state=tk.DISABLED)
        self.text_widget.grid(row=0, column=0, columnspan=5, sticky="nsew")

        buttons = [
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),
            ('0', 4, 0), ('C', 4, 1), ('+', 4, 2), ('=', 4, 3)
        ]

        for (text, row, col) in buttons:
            btn = ttk.Button(self, text=text, command=lambda t=text: self.add_to_input(t))
            btn.grid(row=row, column=col, sticky="nsew", padx=5, pady=5)

        # Dark mode toggle button
        self.dark_mode_btn = ttk.Button(self, text="ðŸŒ™", command=self.toggle_dark_mode)
        self.dark_mode_btn.grid(row=1, column=4, rowspan=4, sticky="nsew", padx=5, pady=5)

        for i in range(5):
            self.grid_rowconfigure(i, weight=1)
        for i in range(5):
            self.grid_columnconfigure(i, weight=1)

    def add_character_key(self, char):
        return lambda event: self.add_to_input(char)

    def format_input(self, s):
        if "e" in s:
            return s
        s = s[::-1]
        formatted = ' '.join(s[i:i+3] for i in range(0, len(s), 3))
        return formatted[::-1]

    def format_output(self, num_str):
        if len(num_str) > 16:
            value = float(num_str)
            return "{:.15e}".format(value)
        return num_str

    def adjust_font_size(self):
        # Determining which line is longer
        lines = [self.memory or "", self.current_input]
        max_len = max(map(len, lines))
        # Adjusting font size based on the length of the longest line
        if max_len > 20:
            self.text_widget.config(font=('Arial', 15))
        else:
            self.text_widget.config(font=('Arial', 20))

    def update_display(self):
        self.adjust_font_size()

        self.text_widget.config(state=tk.NORMAL)
        self.text_widget.delete(1.0, tk.END)
        if self.memory and self.operator:
            self.text_widget.insert(1.0, self.format_input(self.memory) + " " + self.operator + "\n")
        else:
            self.text_widget.insert(1.0, "\n")
        self.text_widget.insert(2.0, self.format_input(self.current_input))
        self.text_widget.config(state=tk.DISABLED)

    def add_to_input(self, value):
        if value in ['+', '-', '*', '/']:
            if self.current_input and not self.current_input[-1] in ['+', '-', '*', '/']:
                if not self.memory:
                    self.memory = self.current_input.replace(" ", "")
                self.operator = value
                self.current_input = ""
        elif value == "=":
            if self.memory and self.operator:
                try:
                    # Remove leading zeros from each number in the expression
                    expression = f"{self.remove_leading_zeros(self.memory)} {self.operator} {self.remove_leading_zeros(self.current_input)}"
                    result = str(eval(expression))
                    self.current_input = self.format_output(result)
                    self.memory = None
                    self.operator = None
                except Exception as e:
                    self.current_input = "Error"
            else:
                pass
        elif value == "C":
            self.current_input = ""
            self.memory = None
            self.operator = None
        else:
            self.current_input += str(value)

        self.update_display()

    def remove_leading_zeros(self, number_str):
        # Split the string into individual numbers and remove leading zeros
        return ' '.join([str(int(num)) if num.isdigit() else num for num in number_str.split()])

    def toggle_dark_mode(self):
        self.is_dark_mode = not self.is_dark_mode

        if self.is_dark_mode:
            self.configure(bg="black")
            self.text_widget.configure(bg="black", fg="yellow")
            self.dark_mode_btn.configure(style="TButton")
        else:
            self.configure(bg="SystemButtonFace")
            self.text_widget.configure(bg="white", fg="black")
            self.dark_mode_btn.configure(style="TButton")

    def run(self):
        self.mainloop()

root = tk.Tk()
root.withdraw()

style = ttk.Style()
style.configure("TButton", background="black", foreground="black")

calc = Calculator(root)
calc.run()
